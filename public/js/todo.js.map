{"version":3,"sources":["todo.js"],"names":["todos","todoListEl","$","taskFieldEl","submitBtnEl","click","saveTodo","then","val","getTodos","renderTodoList","catch","alert","err","console","error","Promise","request","data","resolve","empty","length","todoList","map","task","todo","checked","delEl","done","join","append","reject","mounted","document","ready"],"mappings":";;AAAA,IAAAA,QAAA,EAAA;AACA,IAAAC,aAAAC,EAAA,YAAA,CAAA;AACA,IAAAC,cAAAD,EAAA,OAAA,CAAA;AACA,IAAAE,cAAAF,EAAA,SAAA,CAAA;;AAEAE,YAAAC,KAAA,CAAA,YAAA;AACAC,aAAAC,IAAA,CAAA,YAAA;AACAJ,gBAAAK,GAAA,CAAA,EAAA;;AAEAC,eAAAF,IAAA,CAAA,YAAA;AACAG;AACA,KAFA;AAGA,GANA,EAMAC,KANA,CAMA,eAAA;AACAC,UAAAC,GAAA;;AAEAC,YAAAC,KAAA,CAAAF,GAAA;AACA,GAVA;AAWA,CAZA;;AAcA,SAAAJ,QAAA,GAAA;AACA,SAAA,IAAAO,OAAA,CAAA,mBAAA;AACAC,YAAA,YAAA,EAAAV,IAAA,CAAA,gBAAA;AACAP,cAAAkB,IAAA;;AAEAC;AACA,KAJA,EAIAR,KAJA,CAIA,eAAA;AACAG,cAAAC,KAAA,CAAAF,GAAA;;AAEAb,cAAA,EAAA;;AAEAmB;AACA,KAVA;AAWA,GAZA,CAAA;AAaA;;AAEA,SAAAT,cAAA,GAAA;AACA,SAAA,IAAAM,OAAA,CAAA,mBAAA;AACAf,eAAAmB,KAAA;;AAEA,QAAApB,MAAAqB,MAAA,GAAA,CAAA,EAAA;AACA,UAAAC,WAAAtB,MAAAuB,GAAA,CAAA,gBAAA;AAAA,YACAC,IADA,GACAC,IADA,CACAD,IADA;;AAEA,YAAAE,UAAA,EAAA;AACA,YAAAC,mJAAA;;AAIA,YAAAF,KAAAG,IAAA,EAAA;AACAJ,2BAAAC,KAAAD,IAAA;AACAE,oBAAA,UAAA;AACA;;AAEA,iGAEAA,OAFA,UAEAF,IAFA,SAEAG,KAFA;AAKA,OAjBA,EAiBAE,IAjBA,CAiBA,EAjBA,CAAA;;AAmBA5B,iBAAA6B,MAAA,CAAAR,QAAA;AACArB,iBAAA6B,MAAA;AACA,KAtBA,MAsBA;AACA7B,iBAAA6B,MAAA,CAAA,2BAAA;AACA;;AAEAX;AACA,GA9BA,CAAA;AA+BA;;AAEA,SAAAb,QAAA,GAAA;AACA,MAAAkB,OAAArB,YAAAK,GAAA,EAAA;;AAEA,SAAA,IAAAQ,OAAA,CAAA,UAAAG,OAAA,EAAAY,MAAA,EAAA;AACA,QAAAP,KAAAH,MAAA,GAAA,CAAA,EAAA;AACAU;;AAEA;AACA;;AAEAd,YAAA,YAAA,EAAA,MAAA,EAAA,EAAAO,UAAA,EAAA,EAAAjB,IAAA,CAAA,gBAAA;AACAY,cAAAD,IAAA;AACA,KAFA,EAEAP,KAFA,CAEA,eAAA;AACAoB,aAAAlB,GAAA;AACA,KAJA;AAKA,GAZA,CAAA;AAaA;;AAEA,SAAAmB,OAAA,GAAA;AACAtB,mBAAAH,IAAA,CAAA,YAAA;AACAE,eAAAF,IAAA,CAAA,YAAA;AACAG;AACA,KAFA;AAGA,GAJA;AAKA;;AAEAR,EAAA+B,QAAA,EAAAC,KAAA,CAAA,YAAA;AACAF;AACA,CAFA","file":"todo.js","sourcesContent":["let todos = [];\nconst todoListEl = $('#todo-list');\nconst taskFieldEl = $('#task');\nconst submitBtnEl = $('#submit');\n\nsubmitBtnEl.click(() => {\n  saveTodo().then(() => {\n    taskFieldEl.val('');\n\n    getTodos().then(() => {\n      renderTodoList();\n    });\n  }).catch(err => {\n    alert(err);\n\n    console.error(err);\n  });\n});\n\nfunction getTodos() {\n  return new Promise(resolve => {\n    request('/api/todos').then(data => {\n      todos = data;\n\n      resolve();\n    }).catch(err => {\n      console.error(err);\n\n      todos = [];\n\n      resolve();\n    });\n  })\n}\n\nfunction renderTodoList() {\n  return new Promise(resolve => {\n    todoListEl.empty();\n\n    if (todos.length > 0) {\n      const todoList = todos.map(todo => {\n        let { task } = todo;\n        let checked = '';\n        const delEl = `<a href=\"#\" style=\"text-decoration:none; color:red;\" title=\"Delete\">\n          [<i class=\"glyphicon glyphicon-trash\"></i>]\n        </a>`;\n\n        if (todo.done) {\n          task = `<del>${todo.task}</del>`;\n          checked = ' checked';\n        }\n\n        return `<div class=\"checkbox\">\n          <label>\n            <input type=\"checkbox\"${checked}> ${task} ${delEl}\n          </label>\n        </div>`;\n      }).join('');\n\n      todoListEl.append(todoList);\n      todoListEl.append(`<button class=\"btn btn-danger\">Delete Selected</button>`);\n    } else {\n      todoListEl.append('You have no todo for now.');\n    }\n\n    resolve();\n  });\n}\n\nfunction saveTodo() {\n  const task = taskFieldEl.val();\n\n  return new Promise((resolve, reject) => {\n    if (task.length < 1) {\n      reject(`Todo shouldn't empty.`);\n\n      return;\n    }\n\n    request('/api/todos', 'POST', { task }).then(data => {\n      resolve(data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nfunction mounted() {\n  renderTodoList().then(() => {\n    getTodos().then(() => {\n      renderTodoList();\n    });\n  });\n}\n\n$(document).ready(() => {\n  mounted();\n});\n"]}