{"version":3,"sources":["todo.js"],"names":["todos","todoListEl","$","taskFieldEl","submitBtnEl","selectedTodos","click","saveTodo","then","val","getTodos","renderTodoList","catch","alert","err","console","error","Promise","request","data","resolve","empty","length","todoList","map","id","todo","task","checked","delEl","done","join","append","reject","updateTodoStatus","deleteTodo","deleteBulkTodos","mounted","each","_","el","attr","push","document","ready","on","e","target","is","i","indexOf","splice","preventDefault"],"mappings":"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","file":"todo.js","sourcesContent":["let todos = [];\nconst todoListEl = $('#todo-list');\nconst taskFieldEl = $('#task');\nconst submitBtnEl = $('#submit');\nlet selectedTodos = [];\n\nsubmitBtnEl.click(() => {\n  saveTodo().then(() => {\n    taskFieldEl.val('');\n\n    getTodos().then(() => {\n      renderTodoList();\n    });\n  }).catch(err => {\n    alert(err);\n\n    console.error(err);\n  });\n});\n\nfunction getTodos() {\n  return new Promise(resolve => {\n    request('/api/todos').then(data => {\n      todos = data;\n\n      resolve();\n    }).catch(err => {\n      console.error(err);\n\n      todos = [];\n\n      resolve();\n    });\n  })\n}\n\nfunction renderTodoList() {\n  return new Promise(resolve => {\n    todoListEl.empty();\n\n    if (todos.length > 0) {\n      const todoList = todos.map(todo => {\n        let { id, task } = todo;\n        let checked = '';\n        const delEl = `<a href=\"#\" style=\"text-decoration:none; color:red;\" title=\"Delete\" class=\"todo-delete\" todo-id=\"${id}\">\n          [<i class=\"glyphicon glyphicon-trash\" todo-id=\"${id}\"></i>]\n        </a>`;\n\n        if (todo.done) {\n          task = `<del>${todo.task}</del>`;\n          checked = ' checked';\n        }\n\n        return `<div class=\"checkbox\">\n          <label>\n            <input type=\"checkbox\"${checked} todo-id=\"${id}\" class=\"todo-checkbox\"> ${task} ${delEl}\n          </label>\n        </div>`;\n      }).join('');\n\n      todoListEl.append(todoList);\n      todoListEl.append(`<button class=\"btn btn-danger todo-delete-bulk\">Delete Selected</button>`);\n    } else {\n      todoListEl.append('You have no todo for now.');\n    }\n\n    resolve();\n  });\n}\n\nfunction saveTodo() {\n  const task = taskFieldEl.val();\n\n  return new Promise((resolve, reject) => {\n    if (task.length < 1) {\n      reject(`Todo shouldn't empty.`);\n\n      return;\n    }\n\n    request('/api/todos', 'POST', { task }).then(data => {\n      resolve(data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nfunction updateTodoStatus(id, done) {\n  return new Promise((resolve, reject) => {\n    request(`/api/todos/${id}`, 'PUT', { done }).then(data => {\n      resolve(data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nfunction deleteTodo(id) {\n  return new Promise((resolve, reject) => {\n    request(`/api/todos/${id}`, 'DELETE').then(data => {\n      resolve(data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nfunction deleteBulkTodos() {\n  return new Promise((resolve, reject) => {\n    request('/api/todos/delete-bulk', 'POST', { id: selectedTodos }).then(() => {\n      resolve();\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\nfunction mounted() {\n  renderTodoList().then(() => {\n    getTodos().then(() => {\n      renderTodoList();\n\n      $('.todo-checkbox:checked').each((_, el) => {\n        const id = $(el).attr('todo-id');\n\n        selectedTodos.push(id);\n      });\n    });\n  });\n}\n\n$(document).ready(() => {\n  $('#todo-list').on('click', '.todo-checkbox', e => {\n    const todo = $(e.target);\n    const id = todo.attr('todo-id');\n    const done = todo.is(':checked');\n\n    if (done) {\n      selectedTodos.push(id);\n    } else {\n      const i = selectedTodos.indexOf(id);\n\n      if (i > -1) {\n        selectedTodos.splice(i, 1);\n      }\n    }\n\n    updateTodoStatus(id, done).then(() => {\n      e.preventDefault();\n\n      getTodos().then(() => {\n        renderTodoList();\n      });\n    }).catch(err => {\n      alert(err);\n\n      console.error(err);\n    });\n  });\n\n  $('#todo-list').on('click', '.todo-delete', e => {\n    const id = $(e.target).attr('todo-id');\n\n    deleteTodo(id).then(() => {\n      e.preventDefault();\n\n      getTodos().then(() => {\n        renderTodoList();\n      });\n    }).catch(err => {\n      alert(err);\n\n      console.error(err);\n    });\n  });\n\n  $('#todo-list').on('click', '.todo-delete-bulk', () => {\n    if (selectedTodos.length > 0) {\n      deleteBulkTodos().then(() => {\n        selectedTodos = [];\n\n        getTodos().then(() => {\n          renderTodoList();\n        });\n      }).catch(err => {\n        alert(err);\n\n        console.error(err);\n      });\n    }\n  });\n\n  mounted();\n});\n"]}