{"version":3,"sources":["todo.js"],"names":["todos","todoListEl","$","getTodos","Promise","setTimeout","resolve","task","done","renderTodoList","empty","length","append","mounted","document","ready"],"mappings":";;AAAA,IAAAA,QAAA,EAAA;AACA,IAAAC,aAAAC,EAAA,YAAA,CAAA;;AAEA,SAAAC,QAAA,GAAA;AACA;AACA,SAAA,IAAAC,OAAA,CAAA,mBAAA;AACAC,eAAA,YAAA;AACAC,cAAA,CACA;AACAC,cAAA,MADA;AAEAC,cAAA;AAFA,OADA,EAKA;AACAD,cAAA,MADA;AAEAC,cAAA;AAFA,OALA,CAAA;AAUA,KAXA,EAWA,IAXA;AAYA,GAbA,CAAA;AAcA;;AAEA,eAAAC,cAAA,GAAA;AACAR,aAAAS,KAAA;;AAEA,MAAAV,MAAAW,MAAA,GAAA,CAAA,EAAA;AACA;AACA,GAFA,MAEA;AACAV,eAAAW,MAAA,CAAA,2BAAA;AACA;AACA;;AAEA,eAAAC,OAAA,GAAA;AACAb,UAAA,MAAAG,UAAA;;AAEA,QAAAM,gBAAA;AACA;;AAEAP,EAAAY,QAAA,EAAAC,KAAA,CAAA,kBAAA;AACA;AACA,CAFA","file":"todo.js","sourcesContent":["let todos = [];\nconst todoListEl = $('#todo-list');\n\nfunction getTodos() {\n  // Just for testing for a while...\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([\n        {\n          task: 'Cook',\n          done: false\n        },\n        {\n          task: 'Code',\n          done: true\n        }\n      ]);\n    }, 1500);\n  });\n}\n\nasync function renderTodoList() {\n  todoListEl.empty();\n\n  if (todos.length > 0) {\n    //\n  } else {\n    todoListEl.append('You have no todo for now.');\n  }\n}\n\nasync function mounted() {\n  todos = await getTodos();\n\n  await renderTodoList();\n}\n\n$(document).ready(async () => {\n  //\n});\n"]}